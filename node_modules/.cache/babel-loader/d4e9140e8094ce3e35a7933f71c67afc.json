{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/farhadbahrehmand/Desktop/AD/vulnerable-app-front/src/components/contents/sql-injection/sql-injection-form/Sql-injection-form.js\";\nimport React, { Component } from 'react';\nimport api from '../../../../axios';\nimport _ from 'lodash';\nimport './Sql-injection-form.css';\n\nclass SqlInjectionForm extends Component {\n  selectUser() {\n    var {\n      value\n    } = this.userInput;\n    var path = `/${this.props.type}/user`;\n\n    if (_.trim(value)) {\n      api.post(path, {\n        userId: value\n      }).then(response => {\n        if (response.status === 200) {\n          console.log(response);\n        }\n      }).catch(error => console.log(error));\n    } else {\n      alert('nothing to fetch');\n    }\n  }\n\n  render() {\n    var {\n      type\n    } = this.props;\n    var classes = ['sql-injection-form-container', type];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.join(' '),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sql-injection-form-description\",\n        children: type === 'good' ? 'secure =>' : 'insecure =>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"sql-injection-input\",\n        type: \"text\",\n        placeholder: \"User Id\",\n        ref: userInput => this.userInput = userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sql-injection-btn\",\n        onClick: () => this.selectUser(),\n        children: \"Fetch it\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SqlInjectionForm;","map":{"version":3,"sources":["/Users/farhadbahrehmand/Desktop/AD/vulnerable-app-front/src/components/contents/sql-injection/sql-injection-form/Sql-injection-form.js"],"names":["React","Component","api","_","SqlInjectionForm","selectUser","value","userInput","path","props","type","trim","post","userId","then","response","status","console","log","catch","error","alert","render","classes","join"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,0BAAP;;AAEA,MAAMC,gBAAN,SAA+BH,SAA/B,CAAyC;AAGvCI,EAAAA,UAAU,GAAG;AACX,QAAI;AAACC,MAAAA;AAAD,QAAU,KAAKC,SAAnB;AACA,QAAIC,IAAI,GAAI,IAAG,KAAKC,KAAL,CAAWC,IAAK,OAA/B;;AAEA,QAAIP,CAAC,CAACQ,IAAF,CAAOL,KAAP,CAAJ,EAAmB;AACjBJ,MAAAA,GAAG,CAACU,IAAJ,CAASJ,IAAT,EAAe;AAACK,QAAAA,MAAM,EAAEP;AAAT,OAAf,EACGQ,IADH,CACQC,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,UAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD;AACF,OALH,EAMGI,KANH,CAMSC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CANlB;AAOD,KARD,MASK;AACHC,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AAEF;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI;AAACZ,MAAAA;AAAD,QAAS,KAAKD,KAAlB;AACA,QAAIc,OAAO,GAAG,CAAC,8BAAD,EAAiCb,IAAjC,CAAd;AAEA,wBACE;AAAK,MAAA,SAAS,EAAEa,OAAO,CAACC,IAAR,CAAa,GAAb,CAAhB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAA,kBAAiDd,IAAI,KAAK,MAAT,GAAkB,WAAlB,GAAgC;AAAjF;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,SAAS,EAAC,qBADZ;AAEE,QAAA,IAAI,EAAC,MAFP;AAEc,QAAA,WAAW,EAAC,SAF1B;AAGE,QAAA,GAAG,EAAGH,SAAD,IAAe,KAAKA,SAAL,GAAiBA;AAHvC;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAsC,QAAA,OAAO,EAAE,MAAM,KAAKF,UAAL,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AArCsC;;AAwCzC,eAAeD,gBAAf","sourcesContent":["import React, {Component} from 'react';\nimport api from '../../../../axios';\nimport _ from 'lodash';\n\nimport './Sql-injection-form.css';\n\nclass SqlInjectionForm extends Component {\n\n\n  selectUser() {\n    var {value} = this.userInput;\n    var path = `/${this.props.type}/user`;\n\n    if (_.trim(value)) {\n      api.post(path, {userId: value})\n        .then(response => {\n          if (response.status === 200) {\n            console.log(response)\n          }\n        })\n        .catch(error => console.log(error));\n    }\n    else {\n      alert('nothing to fetch')\n    }\n\n  }\n\n  render() {\n    var {type} = this.props;\n    var classes = ['sql-injection-form-container', type];\n\n    return (\n      <div className={classes.join(' ')}>\n        <div className='sql-injection-form-description'>{type === 'good' ? 'secure =>' : 'insecure =>'}</div>\n        <input \n          className='sql-injection-input' \n          type='text' placeholder='User Id' \n          ref={(userInput) => this.userInput = userInput}\n        ></input>\n        <button className='sql-injection-btn' onClick={() => this.selectUser()}>Fetch it</button>\n      </div>\n    );\n  }\n}\n\nexport default SqlInjectionForm;"]},"metadata":{},"sourceType":"module"}